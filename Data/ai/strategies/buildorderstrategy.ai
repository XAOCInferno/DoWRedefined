class 'BuildOrderStrategy' (Strategy)

function BuildOrderStrategy:__init( info ) super( info )

	self.num = 0
	
	self.complete = false
	
	if self.info == nil then
		self.complete = true
		return
	end

	self:WaitOnNextPlan()

end

function BuildOrderStrategy:GetName()
	return "BuildOrderStrategy"
end

function BuildOrderStrategy:WaitOnNextPlan()
	
	if self.num == table.getn( self.info ) then
		self.complete = true
		return
	end
	
	self.num = self.num + 1
	local current_build_order = self.info[ self.num ]
	
	local plan = nil
	if current_build_order[1] == "squad" then
	
		local prereq = CpuPrerequisites( cpu_manager.cpu_player, current_build_order[2], CpuPrerequisites.BT_Squad )
		if prereq:CannotFulfillPrereqs() then
			self:WaitOnNextPlan()
			return
		else
			local id = cpu_manager.stats:GetSquadID( current_build_order[2] )
			plan = BuildUnitPlan( id, true )
		end
		
	elseif current_build_order[1] == "flag_capture" then

		plan = CapturePlan( cpu_manager.cpu_player:GetStartingPosition(), true )

	elseif current_build_order[1] == "post_builder" then

		plan = ResourcePlan( true )
		
	elseif current_build_order[1] == "building" then
	
		local id = cpu_manager.stats:GetBuildingID( current_build_order[2] )
		plan = BuildBuildingPlan( id, cpu_manager.cpu_player:GetStartingPosition(), true )
	
	elseif current_build_order[1] == "research" then
	
		local id = cpu_manager.stats:GetResearchID( current_build_order[2] )
		plan = BuildResearchPlan( id, true )
		
	elseif current_build_order[1] == "addon" then
	
		local id = cpu_manager.stats:GetAddOnID( current_build_order[2] )
		plan = BuildAddOnPlan( id, true )
		
	end	
	
	dbAssert( plan ~= nil )
	
	self:AddPlan( plan )
	
	if current_build_order[3] == true then
		--wait on start
		plan:AddObserver( self )
	else
		--move on to the next one right away
		self:WaitOnNextPlan()
	end

end

function BuildOrderStrategy:OnPlanEvent( event )

	if event ~= Plan.Events.OnPlanStart then
		return
	end
	
	self:WaitOnNextPlan()

end

function BuildOrderStrategy:Update()

	--FIXME: update timer, and quit out if timer reaches over limit
	if self.complete == true then
		self:PostEvent( Strategy.Events.OnSuccess )
		return
	end
	
	--check that we're not being attacked
	--if I'm being attacked, create defend plans
	for base in self.player_stats:GetBases() do
		if cpu_manager.terrain_analyzer:HasThreat( base:GetPosition(), 15 ) then
			self:PostEvent( Strategy.Events.OnSuccess )
		end
	end

	-- superclass
	Strategy.Update(self)

end
