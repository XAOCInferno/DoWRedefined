import ("Plans/BuildPlan.ai")

class 'BuildBuildingPlan' (BuildPlan)

function BuildBuildingPlan:__init( building_id, build_pos, wait_on_builder) super( CpuPlayer.CT_BuildBuildings )
	
	--nil if you want to automatically quit out on failure
	self.wait_on_builder = wait_on_builder
	self.build_facing_bias = Vector3f( 0,0,0 )

	-- the building i'm trying to build
	BuildPlan.SetItemID( self, building_id )
	BuildPlan.SetItemName( self, cpu_manager.stats:GetBuildingName( building_id ) )

	dbAssert( self.item_name ~= nil )
	
	Plan.SetNeeds( self, "Asking for builder", BuildBuildingPlan.ObtainBuilder )
	Plan.SetState( self, "Wanting to build: "..self.item_name, BuildBuildingPlan.BuildBuilding )

	Plan.SetName( self, "Build Building Plan" )

	self.bBuildDefensive = true
	self.bConsiderBase = true
	self.bConsiderLP = true
	self.bConsiderSO = false
	self.bConsiderThreat = false
	
	if build_pos ~= nil then
		self.build_pos = Vector2f()
		self.build_pos.x = build_pos.x
		self.build_pos.y = build_pos.z
	else
		self:SetDesires( self.item_id )
	end

	local building = build_manager:FindUnfinishedBuilding( self.item_id )
	if building then
		Plan.SetNeeds( self, "Finishing building...", BuildBuildingPlan.ObtainNewBuilder )
		Plan.SetState( self, "Try to finish building: "..self.item_name, BuildBuildingPlan.FixState )
	end
end


function BuildBuildingPlan:SetDesires( building_id )
	-- hack at the end of the project

	local name = cpu_manager.stats:GetBuildingName( building_id )
	
	if name == "guard_turret_heavy_bolter" then
		self.bBuildDefensive = false
		self.bConsiderBase = true
		self.bConsiderLP = true
		self.bConsiderSO = false
		self.bConsiderThreat = false
	elseif name == "guard_mines" then
		self.bBuildDefensive = false
		self.bConsiderBase = false
		self.bConsiderLP = false
		self.bConsiderSO = true
		self.bConsiderThreat = false
	end
end


function BuildBuildingPlan:FindBestEngineerBasePair( bBuildDefensive, bConsiderBase, bConsiderLP, bConsiderSO, bConsiderThreat )

	local enemy_pos
	local enemy = cpu_manager:FindClosestEnemyPlayer()
	if enemy ~= nil then
		enemy_pos = enemy:GetStartingPosition()
	else
		-- use center of map
		enemy_pos = Vector3f()
		enemy_pos.x = 0
		enemy_pos.y = 0
		enemy_pos.z = 0
	end
	
	local best_base_pos = nil
	local best_distance_to_enemy
	local best_enemy_threat
	
	-- Find "best base"
	local stats = cpu_manager.stats:GetPlayerStatsFromID( cpu_manager.player_id )
	for base in stats:GetBases() do

		if	( bConsiderSO == true or base:IsStrategicObjective() == false ) and
			( bConsiderLP == true or base:IsListeningPost() == false ) and
			( bConsiderBase == true or ( base:IsStrategicObjective() == true or base:IsListeningPost() == true ) ) then
			
			local current_base_pos = base:GetPosition()
			local current_distance_to_enemy = cpu_manager.terrain_analyzer:GetPathingDistance( current_base_pos, enemy_pos )
			local current_threat = cpu_manager.terrain_analyzer:GetThreatAtPos( current_base_pos, 25, true )
			
			if best_base_pos == nil then
				best_base_pos = current_base_pos
				best_distance_to_enemy = current_distance_to_enemy
				best_enemy_threat = current_threat

			else
				-- compare
				if	( bConsiderThreat == false ) or ( current_threat < best_enemy_threat ) then

					-- best distance for defensive is LARGER
					if	( bBuildDefensive == true and current_distance_to_enemy > best_distance_to_enemy ) or
						( bBuildDefensive == false and current_distance_to_enemy < best_distance_to_enemy ) then

						best_base_pos = current_base_pos
						best_distance_to_enemy = current_distance_to_enemy
						best_enemy_threat = current_threat

					end
				end
			end
		end
	end
	
	-- find closest engineer to the base we selected
	local best_engineer = nil

	if best_base_pos ~= nil then
		local best_engineer_distance
	
		for squad_ai in military_manager:GetUnlockedSquads() do

			if squad_ai:IsEngineer() and squad_ai:CanBuild( self.item_id ) == SquadAI.CANBUILD_Ok then

				if best_engineer == nil then
					best_engineer = squad_ai
					best_engineer_distance = cpu_manager.terrain_analyzer:GetPathingDistance( squad_ai:GetPosition(), best_base_pos )
				else
					--check if the new squad is closer
					local current_distance = cpu_manager.terrain_analyzer:GetPathingDistance( squad_ai:GetPosition(), best_base_pos )
					if current_distance < best_engineer_distance then
						best_engineer = squad_ai
						best_engineer_distance = current_distance
					end
				end
			end
		end
	end
	
	if best_engineer ~= nil then
		self.build_pos = Vector2f()
		self.build_pos.x = best_base_pos.x
		self.build_pos.y = best_base_pos.z
	end
	
	return best_engineer
end


function BuildBuildingPlan:ObtainBuilder()

	self.bestPosition = Vector3f()
	
	--find a place to build it
	local enemy = cpu_manager:FindFurthestEnemyPlayer()
	if enemy ~= nil then
		self.build_facing_bias = enemy:GetStartingPosition()
	else
		self.build_facing_bias = Vector3f( 0,0,0 )
	end

	local engineer = nil 
	if self.build_pos == nil then
	
		engineer = self:FindBestEngineerBasePair( self.bBuildDefensive, self.bConsiderBase, self.bConsiderLP, self.bConsiderSO, self.bConsiderThreat )
		if engineer == nil then
			aitrace( "unable to find builder/position for: "..self.item_name )
			return
		end
	end
	
	dbAssert( self.bestPosition ~= nil )
	dbAssert( self.build_pos ~= nil )
	
	if not cpu_manager.terrain_analyzer:FindClosestFreePosition( self.item_id, self.build_pos, self.build_facing_bias, self.bestPosition ) then
		aitrace( "unable to place building: "..self.item_name)
		return
	end
	
	--the build pos was already set, but no engineer was found yet. find one close to the best position
	if engineer == nil then
		--find the closest engineer
		local functor = function( squad_ai )
			return squad_ai:IsEngineer() and squad_ai:CanBuild( self.item_id ) == SquadAI.CANBUILD_Ok
		end
		
		engineer = cpu_manager:GetClosestUnlockedSquad( self.bestPosition, 1000, functor )
		
		if engineer == nil then
			aitrace( "no builders for: "..self.item_name )
			return
		end
	end
	
	dbAssert( engineer ~= nil )

	BuildPlan.SetBuilder( self, engineer )
	Plan.SetNeeds( self, "No needs", Plan.NeedsFulfilled )
end


function BuildBuildingPlan:BuildBuilding()

	if self.builder ~= nil then

		dbAssert( self.builder:CanBuildAt( self.item_id, self.bestPosition ) == true )
		self.builder:DoBuildBuilding( self.item_id, self.bestPosition )
		Plan.SetState( self, "Building a "..self.item_name, BuildPlan.BuildingState )
		return
	end
	
	aitrace( "can't build "..self.item_name )

	if self.wait_on_builder == nil then
		Plan.SetComplete( self, true )
	end
end


function BuildBuildingPlan:Retry()

	if( self.build_pos == nil ) then
		Plan.SetComplete( self, true )
		return
	end

	local enemy = cpu_manager:FindFurthestEnemyPlayer()
	if enemy ~= nil then
		self.build_facing_bias = enemy:GetStartingPosition()
	else
		self.build_facing_bias = Vector3f( 0,0,0 )
	end
	
	--find a place to build it
	local enemy = cpu_manager:FindFurthestEnemyPlayer()
	dbAssert( enemy ~= nil )

	self.bestPosition = Vector3f()
	if cpu_manager.terrain_analyzer:FindClosestFreePosition( self.item_id, self.build_pos, self.build_facing_bias, self.bestPosition ) and
		self.builder:CanBuild( self.item_id ) == SquadAI.CANBUILD_Ok then
		
		self.builder:DoBuildBuilding( self.item_id, self.bestPosition )
	end
end


function BuildBuildingPlan:ObtainNewBuilder()

	self.building = nil
	
	self.building = build_manager:FindUnfinishedBuilding( self.item_id )
	if self.building == nil then
		self:SetComplete( true )
	end
	
	--find an engineer
	for squadai in military_manager:GetUnlockedSquads() do

		if( squadai:IsEngineer() ) then
			BuildPlan.SetBuilder( self, squadai )
			Plan.SetNeeds( self, "No needs", Plan.NeedsFulfilled )
			return
		end
	end
end


function BuildBuildingPlan:FixState()

	if self.building == nil or self.builder == nil then
		return
	end
	
	self.started_building = false
	self.builder:DoFinishBuilding( self.building )

	Plan.SetState( self, "Fixing a "..self.item_name, BuildPlan.BuildingState )
end


function BuildBuildingPlan:Update()

	--take into account if my builder dies
	if self.builder ~= nil and not self.builder:IsValid() then
		--reset builder
		Plan.UnlockResource( self, self.builder )
		self.builder = nil

		--set my state to try to fix the building
		Plan.SetNeeds( self, "Asking for new builder", BuildBuildingPlan.ObtainNewBuilder )
		Plan.SetState( self, "Try to fix building: "..self.item_name, BuildBuildingPlan.FixState )
	end
	
	Plan.Update( self )
end
