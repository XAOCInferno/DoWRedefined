class 'CapturePlan' (Plan)

CapturePlan.Maximums = 
{
	points = INT_MAX,
	objectives = INT_MAX
}

function CapturePlan:__init( base_location ) super( CpuPlayer.CT_Resourcing )

	dbAssert( base_location ~= nil )
	
	-- save a copy of the base to resource close to
	self.base_location = Vector3f( base_location )
	
	-- the flag I'm trying to capture
	self.capturing_flag = nil
	self.capturing_squad = nil
	
	Plan.SetState( self, "Capture Flag", CapturePlan.CaptureFlag )
	Plan.SetName( self, "Capture Plan" )
	
	Plan.SetNeeds( self, "Obtain Capturers", CapturePlan.ObtainCapturers )
end

function CapturePlan:IsEqual( plan_name, plan_id )
	return self:GetName() == plan_name
end

function CapturePlan:FindFreeStrategicPoint( from_pos )
	
	--check if I can have more strategic points
	local my_num_pts = resource_manager:GetNumOwnedStrategicPoints()
	
	--don't own more than max
	if (my_num_pts +1) > CapturePlan.Maximums.points then
		return nil
	end
	
	--check if I can have more objectives
	local can_have_objs = true
	local my_num_objs = resource_manager:GetNumOwnedStrategicObjectives()
	
	--don't own more than max
	if (my_num_objs+1) > CapturePlan.Maximums.objectives then
		can_have_objs = false
	end
	
	-- find a strat flag that can be captured
	local strategic_flag = nil
	local prev_distance = 0
	
	for strat_ai in resource_manager:GetUnlockedStrategicPointAIs() do

		--don't go over the maximum number of objectives
		if not strat_ai:IsStrategicObjective() or can_have_objs then
			if 	not cpu_manager:IsFriendly( strat_ai:Owner() ) and 
				not strat_ai:HasListeningPost() and 
				not cpu_manager.terrain_analyzer:HasThreatOnPath( from_pos, strat_ai:GetEntity():GetPosition(), 15 ) then
	
				local new_distance = cpu_manager.terrain_analyzer:GetPathingDistance( from_pos, strat_ai:GetEntity():GetPosition()  )
				if new_distance >= 0 then
				
					if strategic_flag == nil and 
						not cpu_manager.terrain_analyzer:HasThreat( strat_ai:GetEntity():GetPosition(), 15 ) and
						not strat_ai:HasWeapons() then
						
						strategic_flag = strat_ai
						prev_distance = new_distance
						
					elseif strategic_flag ~= nil then
					
						--check distance and not in Danger Zone
						if prev_distance > new_distance and 
							not cpu_manager.terrain_analyzer:HasThreat( strat_ai:GetEntity():GetPosition(), 15 ) and 
							not strat_ai:HasWeapons() then
							
							strategic_flag = strat_ai
							prev_distance = new_distance
						end
						
					end
					
				end
			end
		end
		
	end

	return strategic_flag
end

function CapturePlan:ObtainCapturers()

	--use the one I've already locked
	if self.capturing_squad == nil then
	
		local cur_cost = 0
		
		-- choose weakest squad
		for squad_ai in military_manager:GetUnlockedSquads() do

			-- don't lock ones already in danger
			if squad_ai:IsValid() and not cpu_manager.terrain_analyzer:HasThreat( squad_ai:GetPosition(), 15 ) then

				-- find one that can capture
				if squad_ai:CanCapture() and not squad_ai:WasRecentlyHurt() then
					
					if( self.capturing_squad == nil ) then
						self.capturing_squad = squad_ai
						cur_cost = squad_ai:GetProRatedCost()
					else
					
						local cost = squad_ai:GetProRatedCost()
										
						if( cost < cur_cost ) then
							self.capturing_squad = squad_ai
							cur_cost = cost
						end
						
					end
		
				end
			
			end
			
		end
		
		if( self.capturing_squad == nil ) then
			aitrace( "no squads can capture!" )
			return
		end
		
		Plan.LockResource( self, self.capturing_squad )
	end
	
	--find closest flag to base
	local strategic_flag = self:FindFreeStrategicPoint( self.base_location )
	
	if( strategic_flag == nil ) then
		
		Plan.UnlockResource( self, self.capturing_squad )
		
		self:SetComplete( true )
		aitrace( "no more strategic flags to capture!" )
		return
	end

	self.capturing_flag = strategic_flag

	Plan.LockResource( self, self.capturing_flag )

end


function CapturePlan:FightBack()

	--if no more danger, reset
	if not self.capturing_squad:WasRecentlyHurt() then
		
		Plan.SetState( self, "Capture Flag Again", CapturePlan.CaptureFlag )
		return
		
	end

	local owner = self.capturing_flag:Owner()
	local pos = self.capturing_squad:GetPosition()
	
	--if too many guys, run away
	local current_threat = cpu_manager.terrain_analyzer:GetThreatAtPos( pos, 15, false )
	
	--figure out defensive buildings threat
	if owner ~= 0 then
		local player = cpu_manager.cpu_player:GetStats():GetPlayerStatsFromID( owner ) 
		current_threat = current_threat - cpu_manager:GetDefensiveBuildingsCostAt( player, pos, 15 )
	end
	
	if current_threat > 50 then
	
		aitrace("run away from capturing")
		local base = cpu_manager:FindClosestBase( self.capturing_squad:GetPosition(), true, true, false )
		if base ~= nil then
			self.capturing_squad:DoMove( base:GetPosition() )
		end

		self:SetComplete( true )

	elseif current_threat > 0 then

		if not self.capturing_squad:IsReinforcing() then
				
			local temp = Tactic.ResourceFloor.requisition
			Tactic.ResourceFloor.requisition = 150
		
			if self.capturing_squad:CanReinforce( true, 0 ) then
				self.capturing_squad:DoReinforce( true, 0 )
			elseif self.capturing_squad:CanReinforce( false, 0 ) then
				self.capturing_squad:DoReinforce( false, 0 )
			end

			Tactic.ResourceFloor.requisition = temp
		end
	end
end


function CapturePlan:CapturingFlag()

	--check if a teammate is capturing
	local friendly_capture = false
	if self.capturing_flag:Owner() ~= 0 and 
		self.capturing_flag:Owner() ~= cpu_manager.player_id and 
		cpu_manager:IsFriendly( self.capturing_flag:Owner() ) then
		
		friendly_capture = true
		
	end
	
	if friendly_capture or 
		(self.capturing_flag:FinishedCapturing() and cpu_manager:IsFriendly( self.capturing_flag:Owner() ) ) then
		
		self:UnlockResource( self.capturing_flag )
		self.capturing_flag = nil

		local base = cpu_manager:FindClosestBase( self.capturing_squad:GetPosition(), true, true, false )
		if base ~= nil then
			self.capturing_squad:DoMove( base:GetPosition() )
		end
		
		Plan.SetState( self, "Capture New Flag", CapturePlan.CaptureFlag )
		Plan.SetNeeds( self, "Get new strategic pt", CapturePlan.ObtainCapturers )
		return
	end
	
	--if at any time I'm in danger, fight back or quit out
	--make sure we're not nearly done
	local owner = self.capturing_flag:Owner()
	if self.capturing_squad:WasRecentlyHurt() and 
		not ( self.capturing_flag:IsStrategicObjective() and cpu_manager:IsFriendly( owner ) and self.capturing_flag:GetCaptureProgress() >= 0.85 ) and
		not ( not self.capturing_flag:IsStrategicObjective() and cpu_manager:IsFriendly( owner ) and self.capturing_flag:GetCaptureProgress() >= 0.7 ) then
		
		local pos = self.capturing_squad:GetPosition()
		
		--figure out military threat
		local current_threat = cpu_manager.terrain_analyzer:GetThreatAtPos( pos, 15, false )
		
		--figure out defensive buildings threat
		if owner ~= 0 then
			local player = cpu_manager.cpu_player:GetStats():GetPlayerStatsFromID( owner ) 
			current_threat = current_threat - cpu_manager:GetDefensiveBuildingsCostAt( player, pos, 15 )
		end
		
		if current_threat > 50 then
		
			local base = cpu_manager:FindClosestBase( self.capturing_squad:GetPosition(), true, true, false )
			if base ~= nil then
				self.capturing_squad:DoMove( base:GetPosition() )
			end
			self:SetComplete( true )
			return
			
		else
			Plan.SetState( self, "Fighting back!", CapturePlan.FightBack )
			self.capturing_squad:DoAttackMove( self.capturing_squad:GetPosition() )
		end
	end
	
	if not self.capturing_squad:IsCapturing() then
		self:Retry()
	end
end


function CapturePlan:CaptureFlag()

	if( self.capturing_flag == nil ) then
		return
	end
	
	local entity = self.capturing_flag:GetEntity()

	self.capturing_squad:DoDefault( entity )

	self:OnEvent( Plan.Events.OnPlanStart )
	
	Plan.SetState( self, "Capturing flag", CapturePlan.CapturingFlag )
	Plan.SetNeeds( self, "No needs", Plan.NeedsFulfilled )
end

function CapturePlan:Retry()

	local entity = self.capturing_flag:GetEntity()
	
	self.capturing_squad:DoDefault( entity )
	
end

function CapturePlan:Update()

	if self:IsComplete() then
		return
	end

	if self.capturing_squad ~= nil and not self.capturing_squad:IsValid() then
		self:SetComplete( true )
		return
	end
	
	Plan.Update(self)

end
